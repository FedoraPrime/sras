#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require 'thin'
require './lib/sras'

options = {}

OptionParser.new do |opts|
    opts.banner = 'Usage: sras [options] start'

    opts.on('-c', '--config <file>', 'SRAS config file') do |c|
        options[:config_file] = c
    end

    opts.on('-e', '--environment <production|development|testing>', 'Set Rack environment') do |e|
        options[:environment] = e
    end

    opts.on('-f', '--foreground', 'Run in foreground') do |f|
        options[:foreground] = true
    end

    opts.on('-h', '--host <hostname|ip_addy>', 'Address to which to bind') do |h|
        options[:host] = h
    end

    opts.on('-p', '--port <N>', Integer, 'TCP port to which to bind') do |p|
        options[:port] = p
    end

    opts.on('-l', '--log <file>', 'Log file') do |l|
        options[:log_file] = l
    end

    opts.on('-P', '--pid <file>', 'PID file') do |p|
        options[:pid_file] = p
    end

    opts.on('-S', '--socket <file>', 'Socket file') do |s|
        options[:socket] = s
    end

    opts.on_tail('--version', 'Print version') do |v|
        puts SRAS::Version
        exit
    end

    opts.on_tail('-h', '--help', 'Show this message') do
        puts opts
        exit
    end

    if ARGV.last
        command = ARGV.last.chomp
        if command == 'start'
            options[:command] = command
        end
    else
        puts opts
        exit
    end 
end.parse!

RACK_ENV = options[:environment] || ENV['RACK_ENV'] || 'production'

if options[:config_file]
    ENV['SRAS_CONFIG_FILE'] = options[:config_file]
end

if options[:host]
    ENV['SRAS_BIND_HOST'] = options[:host]
end

if options[:port]
    ENV['SRAS_BIND_PORT'] = options[:port]
end

if options[:log_file]
    ENV['SRAS_LOG_FILE'] = options[:log_file]
end

if options[:pid_file]
    ENV['SRAS_PID_FILE'] = options[:pid_file]
end

if options[:socket]
    ENV['SRAS_SOCKET_FILE'] = options[:socket]
end

## TOFIX
# abort if default asset dir, log file, or pid file aren't writable...

if options[:command] == 'start'
    if SRAS::Config.socket_file
        server = Thin::Server.new(SRAS::Config.socket_file, SRAS::Server.new)
    else
        server = Thin::Server.new(SRAS::Config.host, SRAS::Config.port, SRAS::Server.new)
    end
    server.log_file = SRAS::Config.log_file
    server.pid_file = SRAS::Config.pid_file
    server.tag = 'sras'
    unless options[:foreground]
        warn "Starting sras on #{SRAS::Config.host} port TCP #{SRAS::Config.port}"
        server.daemonize
    end
    server.start
end
